{"version":3,"sources":["components/Note/Note.js","components/NewNote/NewNote.js","components/Base/Base.js","App.js","serviceWorker.js","index.js"],"names":["Note","props","note","onDelete","className","text","onClick","id","NewNote","onFormSubmit","useState","form","setForm","name","onChange","evt","target","value","prevForm","preventDefault","newNoteText","Base","state","notes","URL","console","log","this","fetch","response","json","result","setState","newNote","method","headers","body","JSON","stringify","getNotes","bind","map","item","key","dellNote","addNote","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uWAqBeA,MAjBf,SAAcC,GAAQ,IACZC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,SAMd,OACE,oCACE,yBAAKC,UAAU,mBACb,2BAAIF,EAAKG,MACT,0BAAMD,UAAU,wBAAwBE,QAAU,WARtC,IAACC,IAQuDL,EAAKK,GAP7EJ,EAASI,KAOL,a,4BCyBOC,MApCf,SAAiBP,GAAQ,IACfQ,EAAiBR,EAAjBQ,aADc,EAGEC,mBAAS,CAC/BL,KAAM,KAJc,mBAGfM,EAHe,KAGTC,EAHS,KAyBtB,OACE,oCACE,8BACE,2CACA,8BAAUC,KAAK,OAAOC,SAtBP,SAACC,GAAS,IAAD,EACJA,EAAIC,OAApBH,EADoB,EACpBA,KAAMI,EADc,EACdA,MACdL,GAAQ,SAACM,GAAD,sBAAoBA,EAApB,eAA+BL,EAAOI,QAoBIA,MAAON,EAAKN,OAC1D,0BAAMD,UAAU,sBAAsBE,QAlBvB,SAACS,GAEpB,GADAA,EAAII,iBACc,KAAdR,EAAKN,KAAa,CACpB,IAAMe,EAAc,CAClBf,KAAMM,EAAKN,MAEbI,EAAaW,GACbR,EAAQ,CACNP,KAAM,QAUN,aC7BagB,G,wDACnB,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IACDqB,MAAQ,CACXC,MAAO,IAET,EAAKC,IAAM,8BALM,E,gLASjBC,QAAQC,IAAIC,KAAKH,K,SACMI,MAAMD,KAAKH,K,cAA5BK,E,gBACeA,EAASC,O,OAAxBC,E,OACNJ,KAAKK,SAAS,CAAET,MAAOQ,I,6KAGXE,G,iFACNL,MAAMD,KAAKH,IAAK,CACpBU,OAAQ,OACRC,QAAS,CACP,eAAgB,kCAElBC,KAAMC,KAAKC,UAAUL,K,OAEvBN,KAAKY,W,+KAGQhC,G,iFACPqB,MAAM,GAAD,OAAID,KAAKH,IAAT,YAAgBjB,GAAM,CAC/B2B,OAAQ,W,OAEVP,KAAKY,W,iJAILZ,KAAKY,a,+BAGG,IAAD,OACP,OACE,oCACE,qCAAU,0BAAMnC,UAAU,yBAAyBE,QAASqB,KAAKY,SAASC,KAAKb,OAArE,iBACV,yBAAKvB,UAAU,cACZuB,KAAKL,MAAMC,MAAMkB,KAAI,SAACC,GAAD,OACpB,kBAAC,EAAD,CAAMC,IAAKD,EAAKnC,GAAIL,KAAMwC,EAAMvC,SAAU,EAAKyC,SAASJ,KAAK,SAGjE,kBAAC,EAAD,CAAS/B,aAAckB,KAAKkB,QAAQL,KAAKb,a,GA/CfmB,cCOnBC,MARf,WACE,OACE,yBAAK3C,UAAU,aACb,kBAAC,EAAD,QCKc4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.2cbdb7df.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/accessible-emoji */\nimport React from 'react';\nimport './Note.css';\n\nfunction Note(props) {\n  const { note, onDelete } = props;\n\n  const handleDel = (id) => {\n    onDelete(id);\n  }\n\n  return (\n    <>\n      <div className='block-item-note'>\n        <p>{note.text}</p>\n        <span className='material-icons delete' onClick={ () => { handleDel(note.id); } }>&#10060;</span>\n      </div>\n    </>\n  );\n}\n\nexport default Note;","/* eslint-disable jsx-a11y/accessible-emoji */\nimport React, {useState} from 'react';\nimport './NewNote.css';\n\nfunction NewNote(props) {\n  const { onFormSubmit } = props;\n\n  const [form, setForm] = useState({\n    text: '',\n  });\n\n  const handleChange = (evt) => {\n    const { name, value } = evt.target;\n    setForm((prevForm) => ({ ...prevForm, [name]: value }));\n  };\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    if (form.text !== '') {\n      const newNoteText = {\n        text: form.text,\n      };\n      onFormSubmit(newNoteText);\n      setForm({\n        text: '',\n      });\n    }\n  };\n\n  return (\n    <>\n      <form>\n        <label>New Note</label>\n        <textarea name='text' onChange={handleChange} value={form.text} />\n        <span className=\"material-icons send\" onClick={handleSubmit}>&#10003;</span>\n      </form>\n    </>\n  );\n}\n\nexport default NewNote;","import React, { Component } from 'react';\nimport Note from '../Note/Note';\nimport NewNote from '../NewNote/NewNote';\nimport './Base.css'\n\nexport default class Base extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      notes: [],\n    };\n    this.URL = 'http://localhost:7777/notes';\n  }\n\n  async getNotes() { // Получение списка заметок\n    console.log(this.URL)\n    const response = await fetch(this.URL)\n    const result = await response.json()\n    this.setState({ notes: result });\n  }\n\n  async addNote(newNote) { // Добавление заметки\n    await fetch(this.URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8',\n      },\n      body: JSON.stringify(newNote),\n    })\n    this.getNotes();\n  }\n\n  async dellNote(id) { // Удаление заметки\n    await fetch(`${this.URL}/${id}`, {\n      method: 'DELETE',\n    })\n    this.getNotes();\n  }\n\n  componentDidMount() {\n    this.getNotes();\n  }\n\n  render() {\n    return (\n      <>\n        <h2>Notes <span className='material-icons refresh' onClick={this.getNotes.bind(this)}>&#128472;</span></h2>\n        <div className='list-notes'>\n          {this.state.notes.map((item) => (\n            <Note key={item.id} note={item} onDelete={this.dellNote.bind(this)} />\n          ))}\n        </div>\n        <NewNote onFormSubmit={this.addNote.bind(this)} />\n      </>\n    );\n  }\n}","import React from 'react';\nimport './App.css';\nimport Base from './components/Base/Base.js';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Base />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}